// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// add_rows_bcf
NumericMatrix add_rows_bcf(NumericMatrix prior_tree_table_temp, int grow_node);
RcppExport SEXP _bcfbma_add_rows_bcf(SEXP prior_tree_table_tempSEXP, SEXP grow_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_table_temp(prior_tree_table_tempSEXP);
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(add_rows_bcf(prior_tree_table_temp, grow_node));
    return rcpp_result_gen;
END_RCPP
}
// addcol_bcf
NumericMatrix addcol_bcf(NumericMatrix prior_tree_matrix_temp, int grow_node, NumericVector ld_obs, NumericVector rd_obs);
RcppExport SEXP _bcfbma_addcol_bcf(SEXP prior_tree_matrix_tempSEXP, SEXP grow_nodeSEXP, SEXP ld_obsSEXP, SEXP rd_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_matrix_temp(prior_tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ld_obs(ld_obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rd_obs(rd_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(addcol_bcf(prior_tree_matrix_temp, grow_node, ld_obs, rd_obs));
    return rcpp_result_gen;
END_RCPP
}
// set_daughter_to_end_tree_bcf
NumericMatrix set_daughter_to_end_tree_bcf(int grow_node, NumericMatrix prior_tree_table_temp, double left_daughter);
RcppExport SEXP _bcfbma_set_daughter_to_end_tree_bcf(SEXP grow_nodeSEXP, SEXP prior_tree_table_tempSEXP, SEXP left_daughterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_table_temp(prior_tree_table_tempSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    rcpp_result_gen = Rcpp::wrap(set_daughter_to_end_tree_bcf(grow_node, prior_tree_table_temp, left_daughter));
    return rcpp_result_gen;
END_RCPP
}
// set_daughter_to_end_mat_bcf
NumericMatrix set_daughter_to_end_mat_bcf(double d, NumericMatrix prior_tree_matrix_temp, double left_daughter, NumericVector ld_obs, NumericVector rd_obs);
RcppExport SEXP _bcfbma_set_daughter_to_end_mat_bcf(SEXP dSEXP, SEXP prior_tree_matrix_tempSEXP, SEXP left_daughterSEXP, SEXP ld_obsSEXP, SEXP rd_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_matrix_temp(prior_tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ld_obs(ld_obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rd_obs(rd_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_daughter_to_end_mat_bcf(d, prior_tree_matrix_temp, left_daughter, ld_obs, rd_obs));
    return rcpp_result_gen;
END_RCPP
}
// remove_zero_bcf
NumericVector remove_zero_bcf(NumericVector nodes_at_depth);
RcppExport SEXP _bcfbma_remove_zero_bcf(SEXP nodes_at_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nodes_at_depth(nodes_at_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_zero_bcf(nodes_at_depth));
    return rcpp_result_gen;
END_RCPP
}
// order_intvec_bcf
IntegerVector order_intvec_bcf(IntegerVector x);
RcppExport SEXP _bcfbma_order_intvec_bcf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_intvec_bcf(x));
    return rcpp_result_gen;
END_RCPP
}
// get_gnp_bcf
NumericVector get_gnp_bcf(NumericVector nodes_at_depth, int grow_node);
RcppExport SEXP _bcfbma_get_gnp_bcf(SEXP nodes_at_depthSEXP, SEXP grow_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nodes_at_depth(nodes_at_depthSEXP);
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_gnp_bcf(nodes_at_depth, grow_node));
    return rcpp_result_gen;
END_RCPP
}
// find_term_nodes_bcf
NumericVector find_term_nodes_bcf(NumericMatrix tree_table);
RcppExport SEXP _bcfbma_find_term_nodes_bcf(SEXP tree_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_nodes_bcf(tree_table));
    return rcpp_result_gen;
END_RCPP
}
// find_term_obs_bcf
arma::uvec find_term_obs_bcf(NumericMatrix tree_matrix_temp, double terminal_node);
RcppExport SEXP _bcfbma_find_term_obs_bcf(SEXP tree_matrix_tempSEXP, SEXP terminal_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix_temp(tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type terminal_node(terminal_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_obs_bcf(tree_matrix_temp, terminal_node));
    return rcpp_result_gen;
END_RCPP
}
// likelihood_function_mu_bcf
double likelihood_function_mu_bcf(NumericVector y_temp, NumericMatrix treetable_temp, NumericMatrix obs_to_nodes_temp, double a, double mu, double nu, double lambda);
RcppExport SEXP _bcfbma_likelihood_function_mu_bcf(SEXP y_tempSEXP, SEXP treetable_tempSEXP, SEXP obs_to_nodes_tempSEXP, SEXP aSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_temp(y_tempSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable_temp(treetable_tempSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_to_nodes_temp(obs_to_nodes_tempSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood_function_mu_bcf(y_temp, treetable_temp, obs_to_nodes_temp, a, mu, nu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// likelihood_function_bcf
double likelihood_function_bcf(NumericVector y_temp, NumericMatrix treetable_temp, NumericMatrix obs_to_nodes_temp, double a, double mu, double nu, double lambda);
RcppExport SEXP _bcfbma_likelihood_function_bcf(SEXP y_tempSEXP, SEXP treetable_tempSEXP, SEXP obs_to_nodes_tempSEXP, SEXP aSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_temp(y_tempSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable_temp(treetable_tempSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_to_nodes_temp(obs_to_nodes_tempSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood_function_bcf(y_temp, treetable_temp, obs_to_nodes_temp, a, mu, nu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// find_internal_nodes_bcf
arma::uvec find_internal_nodes_bcf(NumericMatrix treetable);
RcppExport SEXP _bcfbma_find_internal_nodes_bcf(SEXP treetableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable(treetableSEXP);
    rcpp_result_gen = Rcpp::wrap(find_internal_nodes_bcf(treetable));
    return rcpp_result_gen;
END_RCPP
}
// find_prev_nonterm_bcf
double find_prev_nonterm_bcf(arma::uvec find_nonterm, NumericVector prev);
RcppExport SEXP _bcfbma_find_prev_nonterm_bcf(SEXP find_nontermSEXP, SEXP prevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type find_nonterm(find_nontermSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prev(prevSEXP);
    rcpp_result_gen = Rcpp::wrap(find_prev_nonterm_bcf(find_nonterm, prev));
    return rcpp_result_gen;
END_RCPP
}
// find_nodes_to_update_bcf
arma::uvec find_nodes_to_update_bcf(arma::uvec all_ld, double left_daughter);
RcppExport SEXP _bcfbma_find_nodes_to_update_bcf(SEXP all_ldSEXP, SEXP left_daughterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type all_ld(all_ldSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    rcpp_result_gen = Rcpp::wrap(find_nodes_to_update_bcf(all_ld, left_daughter));
    return rcpp_result_gen;
END_RCPP
}
// set_tree_to_middle_bcf
NumericMatrix set_tree_to_middle_bcf(NumericVector node_to_update, NumericMatrix prior_tree_table_temp, int grow_node, double left_daughter);
RcppExport SEXP _bcfbma_set_tree_to_middle_bcf(SEXP node_to_updateSEXP, SEXP prior_tree_table_tempSEXP, SEXP grow_nodeSEXP, SEXP left_daughterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type node_to_update(node_to_updateSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_table_temp(prior_tree_table_tempSEXP);
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    rcpp_result_gen = Rcpp::wrap(set_tree_to_middle_bcf(node_to_update, prior_tree_table_temp, grow_node, left_daughter));
    return rcpp_result_gen;
END_RCPP
}
// update_grow_obs_bcf
NumericMatrix update_grow_obs_bcf(NumericMatrix prior_tree_matrix_temp, double grow_node, double left_daughter, double d, NumericVector ld_obs, NumericVector rd_obs);
RcppExport SEXP _bcfbma_update_grow_obs_bcf(SEXP prior_tree_matrix_tempSEXP, SEXP grow_nodeSEXP, SEXP left_daughterSEXP, SEXP dSEXP, SEXP ld_obsSEXP, SEXP rd_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_matrix_temp(prior_tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type grow_node(grow_nodeSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ld_obs(ld_obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rd_obs(rd_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_grow_obs_bcf(prior_tree_matrix_temp, grow_node, left_daughter, d, ld_obs, rd_obs));
    return rcpp_result_gen;
END_RCPP
}
// find_obs_to_update_grow_bcf
NumericMatrix find_obs_to_update_grow_bcf(NumericMatrix prior_tree_matrix_temp, double left_daughter, double d, NumericVector ld_obs, NumericVector rd_obs);
RcppExport SEXP _bcfbma_find_obs_to_update_grow_bcf(SEXP prior_tree_matrix_tempSEXP, SEXP left_daughterSEXP, SEXP dSEXP, SEXP ld_obsSEXP, SEXP rd_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_matrix_temp(prior_tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type left_daughter(left_daughterSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ld_obs(ld_obsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rd_obs(rd_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(find_obs_to_update_grow_bcf(prior_tree_matrix_temp, left_daughter, d, ld_obs, rd_obs));
    return rcpp_result_gen;
END_RCPP
}
// get_subset_bcf
arma::mat get_subset_bcf(arma::mat& xmat, NumericVector grow_obs);
RcppExport SEXP _bcfbma_get_subset_bcf(SEXP xmatSEXP, SEXP grow_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grow_obs(grow_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subset_bcf(xmat, grow_obs));
    return rcpp_result_gen;
END_RCPP
}
// get_daughter_obs_bcf
List get_daughter_obs_bcf(arma::mat& xmat, NumericVector obs_to_update, int split_var, double split_point);
RcppExport SEXP _bcfbma_get_daughter_obs_bcf(SEXP xmatSEXP, SEXP obs_to_updateSEXP, SEXP split_varSEXP, SEXP split_pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type obs_to_update(obs_to_updateSEXP);
    Rcpp::traits::input_parameter< int >::type split_var(split_varSEXP);
    Rcpp::traits::input_parameter< double >::type split_point(split_pointSEXP);
    rcpp_result_gen = Rcpp::wrap(get_daughter_obs_bcf(xmat, obs_to_update, split_var, split_point));
    return rcpp_result_gen;
END_RCPP
}
// find_term_cols_bcf
NumericVector find_term_cols_bcf(NumericMatrix tree_matrix_temp, int terminal_node);
RcppExport SEXP _bcfbma_find_term_cols_bcf(SEXP tree_matrix_tempSEXP, SEXP terminal_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix_temp(tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< int >::type terminal_node(terminal_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_term_cols_bcf(tree_matrix_temp, terminal_node));
    return rcpp_result_gen;
END_RCPP
}
// get_grow_obs_bcf
NumericVector get_grow_obs_bcf(arma::mat& xmat, NumericVector grow_obs, int split_var);
RcppExport SEXP _bcfbma_get_grow_obs_bcf(SEXP xmatSEXP, SEXP grow_obsSEXP, SEXP split_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grow_obs(grow_obsSEXP);
    Rcpp::traits::input_parameter< int >::type split_var(split_varSEXP);
    rcpp_result_gen = Rcpp::wrap(get_grow_obs_bcf(xmat, grow_obs, split_var));
    return rcpp_result_gen;
END_RCPP
}
// get_grow_obs_in_z_bcf
NumericVector get_grow_obs_in_z_bcf(arma::vec& z_ar, NumericVector grow_obs);
RcppExport SEXP _bcfbma_get_grow_obs_in_z_bcf(SEXP z_arSEXP, SEXP grow_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type z_ar(z_arSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grow_obs(grow_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_grow_obs_in_z_bcf(z_ar, grow_obs));
    return rcpp_result_gen;
END_RCPP
}
// grow_tree_bcf
List grow_tree_bcf(arma::mat& xmat, NumericVector y, NumericMatrix prior_tree_matrix, int grow_node, NumericMatrix prior_tree_table, int splitvar, double splitpoint, NumericVector terminal_nodes, NumericVector grow_obs, double d, NumericVector get_min, arma::mat& data_curr_node);
RcppExport SEXP _bcfbma_grow_tree_bcf(SEXP xmatSEXP, SEXP ySEXP, SEXP prior_tree_matrixSEXP, SEXP grow_nodeSEXP, SEXP prior_tree_tableSEXP, SEXP splitvarSEXP, SEXP splitpointSEXP, SEXP terminal_nodesSEXP, SEXP grow_obsSEXP, SEXP dSEXP, SEXP get_minSEXP, SEXP data_curr_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type xmat(xmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_matrix(prior_tree_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type grow_node(grow_nodeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prior_tree_table(prior_tree_tableSEXP);
    Rcpp::traits::input_parameter< int >::type splitvar(splitvarSEXP);
    Rcpp::traits::input_parameter< double >::type splitpoint(splitpointSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type terminal_nodes(terminal_nodesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grow_obs(grow_obsSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type get_min(get_minSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data_curr_node(data_curr_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(grow_tree_bcf(xmat, y, prior_tree_matrix, grow_node, prior_tree_table, splitvar, splitpoint, terminal_nodes, grow_obs, d, get_min, data_curr_node));
    return rcpp_result_gen;
END_RCPP
}
// set_daughter_bcf
NumericMatrix set_daughter_bcf(int left_daughter, int right_daughter, IntegerVector ld_obs, IntegerVector rd_obs, NumericMatrix tree_matrix_temp, double term_cols);
RcppExport SEXP _bcfbma_set_daughter_bcf(SEXP left_daughterSEXP, SEXP right_daughterSEXP, SEXP ld_obsSEXP, SEXP rd_obsSEXP, SEXP tree_matrix_tempSEXP, SEXP term_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type left_daughter(left_daughterSEXP);
    Rcpp::traits::input_parameter< int >::type right_daughter(right_daughterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_obs(ld_obsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rd_obs(rd_obsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix_temp(tree_matrix_tempSEXP);
    Rcpp::traits::input_parameter< double >::type term_cols(term_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_daughter_bcf(left_daughter, right_daughter, ld_obs, rd_obs, tree_matrix_temp, term_cols));
    return rcpp_result_gen;
END_RCPP
}
// order__bcf
IntegerVector order__bcf(NumericVector x);
RcppExport SEXP _bcfbma_order__bcf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order__bcf(x));
    return rcpp_result_gen;
END_RCPP
}
// orderforOW__bcf
IntegerVector orderforOW__bcf(NumericVector x);
RcppExport SEXP _bcfbma_orderforOW__bcf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(orderforOW__bcf(x));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_prior_bcf
double get_tree_prior_bcf(NumericMatrix tree_table, NumericMatrix tree_matrix, double alpha, double beta);
RcppExport SEXP _bcfbma_get_tree_prior_bcf(SEXP tree_tableSEXP, SEXP tree_matrixSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix(tree_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_prior_bcf(tree_table, tree_matrix, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// start_tree_bcf
NumericMatrix start_tree_bcf(double start_mean, double start_sd);
RcppExport SEXP _bcfbma_start_tree_bcf(SEXP start_meanSEXP, SEXP start_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type start_mean(start_meanSEXP);
    Rcpp::traits::input_parameter< double >::type start_sd(start_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(start_tree_bcf(start_mean, start_sd));
    return rcpp_result_gen;
END_RCPP
}
// start_matrix_bcf
NumericMatrix start_matrix_bcf(int n);
RcppExport SEXP _bcfbma_start_matrix_bcf(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(start_matrix_bcf(n));
    return rcpp_result_gen;
END_RCPP
}
// evaluate_model_occams_window_bcf
List evaluate_model_occams_window_bcf(NumericVector tree_lik, double lowest_BIC, int c, List tree_list, List tree_mat_list, IntegerVector tree_parent);
RcppExport SEXP _bcfbma_evaluate_model_occams_window_bcf(SEXP tree_likSEXP, SEXP lowest_BICSEXP, SEXP cSEXP, SEXP tree_listSEXP, SEXP tree_mat_listSEXP, SEXP tree_parentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type tree_lik(tree_likSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< List >::type tree_list(tree_listSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat_list(tree_mat_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tree_parent(tree_parentSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluate_model_occams_window_bcf(tree_lik, lowest_BIC, c, tree_list, tree_mat_list, tree_parent));
    return rcpp_result_gen;
END_RCPP
}
// get_testdata_term_obs_bcf
NumericVector get_testdata_term_obs_bcf(NumericMatrix test_data, NumericMatrix tree_data, NumericVector term_node_means);
RcppExport SEXP _bcfbma_get_testdata_term_obs_bcf(SEXP test_dataSEXP, SEXP tree_dataSEXP, SEXP term_node_meansSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_data(tree_dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type term_node_means(term_node_meansSEXP);
    rcpp_result_gen = Rcpp::wrap(get_testdata_term_obs_bcf(test_data, tree_data, term_node_means));
    return rcpp_result_gen;
END_RCPP
}
// resize_bcf
List resize_bcf(const List& x, int n);
RcppExport SEXP _bcfbma_resize_bcf(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(resize_bcf(x, n));
    return rcpp_result_gen;
END_RCPP
}
// resize_bigger_bcf
List resize_bigger_bcf(const List& x, int n);
RcppExport SEXP _bcfbma_resize_bigger_bcf(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(resize_bigger_bcf(x, n));
    return rcpp_result_gen;
END_RCPP
}
// J_bcf
arma::mat J_bcf(NumericMatrix treetable_temp, NumericMatrix obs_to_nodes_temp, NumericVector tree_term_nodes);
RcppExport SEXP _bcfbma_J_bcf(SEXP treetable_tempSEXP, SEXP obs_to_nodes_tempSEXP, SEXP tree_term_nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable_temp(treetable_tempSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type obs_to_nodes_temp(obs_to_nodes_tempSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tree_term_nodes(tree_term_nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(J_bcf(treetable_temp, obs_to_nodes_temp, tree_term_nodes));
    return rcpp_result_gen;
END_RCPP
}
// mu_vector_bcf
NumericVector mu_vector_bcf(List sum_treetable, int n);
RcppExport SEXP _bcfbma_mu_vector_bcf(SEXP sum_treetableSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sum_treetable(sum_treetableSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_vector_bcf(sum_treetable, n));
    return rcpp_result_gen;
END_RCPP
}
// W_bcf
arma::mat W_bcf(List sum_treetable, List sum_obs_to_nodes, int n);
RcppExport SEXP _bcfbma_W_bcf(SEXP sum_treetableSEXP, SEXP sum_obs_to_nodesSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type sum_treetable(sum_treetableSEXP);
    Rcpp::traits::input_parameter< List >::type sum_obs_to_nodes(sum_obs_to_nodesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(W_bcf(sum_treetable, sum_obs_to_nodes, n));
    return rcpp_result_gen;
END_RCPP
}
// sumtree_likelihood_function_bcf_bcf
double sumtree_likelihood_function_bcf_bcf(NumericVector y_temp, List sum_treetable_mu, List sum_treetable_tau, List sum_obs_to_nodes_mu, List sum_obs_to_nodes_tau, int n, double a_mu, double a_tau, double nu, double lambda, NumericVector z);
RcppExport SEXP _bcfbma_sumtree_likelihood_function_bcf_bcf(SEXP y_tempSEXP, SEXP sum_treetable_muSEXP, SEXP sum_treetable_tauSEXP, SEXP sum_obs_to_nodes_muSEXP, SEXP sum_obs_to_nodes_tauSEXP, SEXP nSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_temp(y_tempSEXP);
    Rcpp::traits::input_parameter< List >::type sum_treetable_mu(sum_treetable_muSEXP);
    Rcpp::traits::input_parameter< List >::type sum_treetable_tau(sum_treetable_tauSEXP);
    Rcpp::traits::input_parameter< List >::type sum_obs_to_nodes_mu(sum_obs_to_nodes_muSEXP);
    Rcpp::traits::input_parameter< List >::type sum_obs_to_nodes_tau(sum_obs_to_nodes_tauSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(sumtree_likelihood_function_bcf_bcf(y_temp, sum_treetable_mu, sum_treetable_tau, sum_obs_to_nodes_mu, sum_obs_to_nodes_tau, n, a_mu, a_tau, nu, lambda, z));
    return rcpp_result_gen;
END_RCPP
}
// get_best_split_mu_bcf
List get_best_split_mu_bcf(NumericVector resids, arma::mat& data, NumericMatrix treetable, NumericMatrix tree_mat, double a, double mu, double nu, double lambda, int c, double lowest_BIC, int parent, NumericMatrix cp_mat, double alpha, double beta, int maxOWsize, int first_round);
RcppExport SEXP _bcfbma_get_best_split_mu_bcf(SEXP residsSEXP, SEXP dataSEXP, SEXP treetableSEXP, SEXP tree_matSEXP, SEXP aSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP lowest_BICSEXP, SEXP parentSEXP, SEXP cp_matSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP maxOWsizeSEXP, SEXP first_roundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable(treetableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_mat(tree_matSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cp_mat(cp_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_split_mu_bcf(resids, data, treetable, tree_mat, a, mu, nu, lambda, c, lowest_BIC, parent, cp_mat, alpha, beta, maxOWsize, first_round));
    return rcpp_result_gen;
END_RCPP
}
// get_best_split_bcf
List get_best_split_bcf(NumericVector resids, arma::mat& data, NumericMatrix treetable, NumericMatrix tree_mat, double a, double mu, double nu, double lambda, int c, double lowest_BIC, int parent, NumericMatrix cp_mat, double alpha, double beta, int maxOWsize, int first_round);
RcppExport SEXP _bcfbma_get_best_split_bcf(SEXP residsSEXP, SEXP dataSEXP, SEXP treetableSEXP, SEXP tree_matSEXP, SEXP aSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP lowest_BICSEXP, SEXP parentSEXP, SEXP cp_matSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP maxOWsizeSEXP, SEXP first_roundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type treetable(treetableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_mat(tree_matSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cp_mat(cp_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_split_bcf(resids, data, treetable, tree_mat, a, mu, nu, lambda, c, lowest_BIC, parent, cp_mat, alpha, beta, maxOWsize, first_round));
    return rcpp_result_gen;
END_RCPP
}
// get_best_split_tau_round1_bcf
List get_best_split_tau_round1_bcf(NumericVector resids, arma::mat& x_moderate_a, NumericMatrix tree_table_tau, NumericMatrix tree_mat_tau, double a_mu, double a_tau, double mu_mu, double mu_tau, double nu, double lambda, int c, double lowest_BIC, int parent, NumericMatrix cp_mat, double alpha_mu, double beta_mu, double alpha_tau, double beta_tau, int maxOWsize, int first_round, List prev_sum_trees_mu, List prev_sum_trees_mat_mu, NumericVector y_scaled, IntegerVector parent2, int i, NumericVector z);
RcppExport SEXP _bcfbma_get_best_split_tau_round1_bcf(SEXP residsSEXP, SEXP x_moderate_aSEXP, SEXP tree_table_tauSEXP, SEXP tree_mat_tauSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP mu_muSEXP, SEXP mu_tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP lowest_BICSEXP, SEXP parentSEXP, SEXP cp_matSEXP, SEXP alpha_muSEXP, SEXP beta_muSEXP, SEXP alpha_tauSEXP, SEXP beta_tauSEXP, SEXP maxOWsizeSEXP, SEXP first_roundSEXP, SEXP prev_sum_trees_muSEXP, SEXP prev_sum_trees_mat_muSEXP, SEXP y_scaledSEXP, SEXP parent2SEXP, SEXP iSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x_moderate_a(x_moderate_aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table_tau(tree_table_tauSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_mat_tau(tree_mat_tauSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type mu_tau(mu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cp_mat(cp_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_mu(beta_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_tau(alpha_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tau(beta_tauSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mu(prev_sum_trees_muSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat_mu(prev_sum_trees_mat_muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_scaled(y_scaledSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parent2(parent2SEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_split_tau_round1_bcf(resids, x_moderate_a, tree_table_tau, tree_mat_tau, a_mu, a_tau, mu_mu, mu_tau, nu, lambda, c, lowest_BIC, parent, cp_mat, alpha_mu, beta_mu, alpha_tau, beta_tau, maxOWsize, first_round, prev_sum_trees_mu, prev_sum_trees_mat_mu, y_scaled, parent2, i, z));
    return rcpp_result_gen;
END_RCPP
}
// get_best_split_sum_tau_bcf
List get_best_split_sum_tau_bcf(NumericVector resids, arma::mat& x_moderate_a, NumericMatrix tree_table_tau, NumericMatrix tree_mat_tau, double a_mu, double a_tau, double mu_mu, double mu_tau, double nu, double lambda, int c, double lowest_BIC, int parent, NumericMatrix cp_mat, double alpha_mu, double beta_mu, double alpha_tau, double beta_tau, int maxOWsize, int first_round, List prev_sum_trees_mu, List prev_sum_trees_tau, List prev_sum_trees_mat_mu, List prev_sum_trees_mat_tau, NumericVector y_scaled, IntegerVector parent2, int i, NumericVector z);
RcppExport SEXP _bcfbma_get_best_split_sum_tau_bcf(SEXP residsSEXP, SEXP x_moderate_aSEXP, SEXP tree_table_tauSEXP, SEXP tree_mat_tauSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP mu_muSEXP, SEXP mu_tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP lowest_BICSEXP, SEXP parentSEXP, SEXP cp_matSEXP, SEXP alpha_muSEXP, SEXP beta_muSEXP, SEXP alpha_tauSEXP, SEXP beta_tauSEXP, SEXP maxOWsizeSEXP, SEXP first_roundSEXP, SEXP prev_sum_trees_muSEXP, SEXP prev_sum_trees_tauSEXP, SEXP prev_sum_trees_mat_muSEXP, SEXP prev_sum_trees_mat_tauSEXP, SEXP y_scaledSEXP, SEXP parent2SEXP, SEXP iSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x_moderate_a(x_moderate_aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table_tau(tree_table_tauSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_mat_tau(tree_mat_tauSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type mu_tau(mu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cp_mat(cp_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_mu(beta_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_tau(alpha_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tau(beta_tauSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mu(prev_sum_trees_muSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_tau(prev_sum_trees_tauSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat_mu(prev_sum_trees_mat_muSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat_tau(prev_sum_trees_mat_tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_scaled(y_scaledSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parent2(parent2SEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_split_sum_tau_bcf(resids, x_moderate_a, tree_table_tau, tree_mat_tau, a_mu, a_tau, mu_mu, mu_tau, nu, lambda, c, lowest_BIC, parent, cp_mat, alpha_mu, beta_mu, alpha_tau, beta_tau, maxOWsize, first_round, prev_sum_trees_mu, prev_sum_trees_tau, prev_sum_trees_mat_mu, prev_sum_trees_mat_tau, y_scaled, parent2, i, z));
    return rcpp_result_gen;
END_RCPP
}
// get_best_split_sum_mu_bcf
List get_best_split_sum_mu_bcf(NumericVector resids, arma::mat& x_control_a, NumericMatrix tree_table_mu, NumericMatrix tree_mat_mu, double a_mu, double a_tau, double mu_mu, double mu_tau, double nu, double lambda, int c, double lowest_BIC, int parent, NumericMatrix cp_mat, double alpha_mu, double beta_mu, double alpha_tau, double beta_tau, int maxOWsize, int first_round, List prev_sum_trees_mu, List prev_sum_trees_tau, List prev_sum_trees_mat_mu, List prev_sum_trees_mat_tau, NumericVector y_scaled, IntegerVector parent2, int i, NumericVector z);
RcppExport SEXP _bcfbma_get_best_split_sum_mu_bcf(SEXP residsSEXP, SEXP x_control_aSEXP, SEXP tree_table_muSEXP, SEXP tree_mat_muSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP mu_muSEXP, SEXP mu_tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP lowest_BICSEXP, SEXP parentSEXP, SEXP cp_matSEXP, SEXP alpha_muSEXP, SEXP beta_muSEXP, SEXP alpha_tauSEXP, SEXP beta_tauSEXP, SEXP maxOWsizeSEXP, SEXP first_roundSEXP, SEXP prev_sum_trees_muSEXP, SEXP prev_sum_trees_tauSEXP, SEXP prev_sum_trees_mat_muSEXP, SEXP prev_sum_trees_mat_tauSEXP, SEXP y_scaledSEXP, SEXP parent2SEXP, SEXP iSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x_control_a(x_control_aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table_mu(tree_table_muSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_mat_mu(tree_mat_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type mu_tau(mu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cp_mat(cp_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_mu(beta_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_tau(alpha_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tau(beta_tauSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mu(prev_sum_trees_muSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_tau(prev_sum_trees_tauSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat_mu(prev_sum_trees_mat_muSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat_tau(prev_sum_trees_mat_tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_scaled(y_scaledSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parent2(parent2SEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_split_sum_mu_bcf(resids, x_control_a, tree_table_mu, tree_mat_mu, a_mu, a_tau, mu_mu, mu_tau, nu, lambda, c, lowest_BIC, parent, cp_mat, alpha_mu, beta_mu, alpha_tau, beta_tau, maxOWsize, first_round, prev_sum_trees_mu, prev_sum_trees_tau, prev_sum_trees_mat_mu, prev_sum_trees_mat_tau, y_scaled, parent2, i, z));
    return rcpp_result_gen;
END_RCPP
}
// update_mean_var_bcf
NumericVector update_mean_var_bcf(NumericMatrix tree_table, NumericMatrix tree_matrix, NumericVector resids, double a);
RcppExport SEXP _bcfbma_update_mean_var_bcf(SEXP tree_tableSEXP, SEXP tree_matrixSEXP, SEXP residsSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix(tree_matrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mean_var_bcf(tree_table, tree_matrix, resids, a));
    return rcpp_result_gen;
END_RCPP
}
// update_predictions_bcf
List update_predictions_bcf(NumericMatrix tree_table, NumericMatrix tree_matrix, NumericVector new_mean, int n);
RcppExport SEXP _bcfbma_update_predictions_bcf(SEXP tree_tableSEXP, SEXP tree_matrixSEXP, SEXP new_meanSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_table(tree_tableSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tree_matrix(tree_matrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type new_mean(new_meanSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(update_predictions_bcf(tree_table, tree_matrix, new_mean, n));
    return rcpp_result_gen;
END_RCPP
}
// subsetter_bcf
NumericVector subsetter_bcf(NumericVector a, LogicalVector b);
RcppExport SEXP _bcfbma_subsetter_bcf(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetter_bcf(a, b));
    return rcpp_result_gen;
END_RCPP
}
// order_inc__bcf
IntegerVector order_inc__bcf(NumericVector x);
RcppExport SEXP _bcfbma_order_inc__bcf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_inc__bcf(x));
    return rcpp_result_gen;
END_RCPP
}
// min_which2_bcf
List min_which2_bcf(NumericVector array, int n, double minout, int whichout);
RcppExport SEXP _bcfbma_min_which2_bcf(SEXP arraySEXP, SEXP nSEXP, SEXP minoutSEXP, SEXP whichoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type array(arraySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type minout(minoutSEXP);
    Rcpp::traits::input_parameter< int >::type whichout(whichoutSEXP);
    rcpp_result_gen = Rcpp::wrap(min_which2_bcf(array, n, minout, whichout));
    return rcpp_result_gen;
END_RCPP
}
// mll_meanvar2_bcf
double mll_meanvar2_bcf(double x, double x2, int n);
RcppExport SEXP _bcfbma_mll_meanvar2_bcf(SEXP xSEXP, SEXP x2SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mll_meanvar2_bcf(x, x2, n));
    return rcpp_result_gen;
END_RCPP
}
// PELT_meanvar_norm2_bcf
IntegerVector PELT_meanvar_norm2_bcf(NumericVector resp, double pen);
RcppExport SEXP _bcfbma_PELT_meanvar_norm2_bcf(SEXP respSEXP, SEXP penSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    rcpp_result_gen = Rcpp::wrap(PELT_meanvar_norm2_bcf(resp, pen));
    return rcpp_result_gen;
END_RCPP
}
// SS_bcf
double SS_bcf(arma::vec x, arma::vec y, double split);
RcppExport SEXP _bcfbma_SS_bcf(SEXP xSEXP, SEXP ySEXP, SEXP splitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type split(splitSEXP);
    rcpp_result_gen = Rcpp::wrap(SS_bcf(x, y, split));
    return rcpp_result_gen;
END_RCPP
}
// gridCP_bcf
List gridCP_bcf(arma::vec x, arma::vec y, int gridSize);
RcppExport SEXP _bcfbma_gridCP_bcf(SEXP xSEXP, SEXP ySEXP, SEXP gridSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type gridSize(gridSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(gridCP_bcf(x, y, gridSize));
    return rcpp_result_gen;
END_RCPP
}
// make_gridpoint_cpmat_mu_bcf
List make_gridpoint_cpmat_mu_bcf(NumericMatrix data, NumericVector resp, int gridsize, int num_cp);
RcppExport SEXP _bcfbma_make_gridpoint_cpmat_mu_bcf(SEXP dataSEXP, SEXP respSEXP, SEXP gridsizeSEXP, SEXP num_cpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp(num_cpSEXP);
    rcpp_result_gen = Rcpp::wrap(make_gridpoint_cpmat_mu_bcf(data, resp, gridsize, num_cp));
    return rcpp_result_gen;
END_RCPP
}
// make_gridpoint_cpmat_tau_bcf
List make_gridpoint_cpmat_tau_bcf(NumericMatrix data, NumericVector resp, int gridsize, int num_cp, NumericVector z);
RcppExport SEXP _bcfbma_make_gridpoint_cpmat_tau_bcf(SEXP dataSEXP, SEXP respSEXP, SEXP gridsizeSEXP, SEXP num_cpSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp(num_cpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(make_gridpoint_cpmat_tau_bcf(data, resp, gridsize, num_cp, z));
    return rcpp_result_gen;
END_RCPP
}
// make_pelt_cpmat_mu_bcf
List make_pelt_cpmat_mu_bcf(NumericMatrix data, NumericVector resp, double pen, int num_cp);
RcppExport SEXP _bcfbma_make_pelt_cpmat_mu_bcf(SEXP dataSEXP, SEXP respSEXP, SEXP penSEXP, SEXP num_cpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp(num_cpSEXP);
    rcpp_result_gen = Rcpp::wrap(make_pelt_cpmat_mu_bcf(data, resp, pen, num_cp));
    return rcpp_result_gen;
END_RCPP
}
// make_pelt_cpmat_tau_bcf
List make_pelt_cpmat_tau_bcf(NumericMatrix data, NumericVector resp, double pen, int num_cp, NumericVector z);
RcppExport SEXP _bcfbma_make_pelt_cpmat_tau_bcf(SEXP dataSEXP, SEXP respSEXP, SEXP penSEXP, SEXP num_cpSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< double >::type pen(penSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp(num_cpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(make_pelt_cpmat_tau_bcf(data, resp, pen, num_cp, z));
    return rcpp_result_gen;
END_RCPP
}
// get_best_trees_mu_bcf
List get_best_trees_mu_bcf(arma::mat& x_control_a, arma::mat& x_moderate_a, NumericVector z, NumericMatrix resids, double a_mu, double a_tau, double mu_mu, double mu_tau, double nu, double lambda, int c, double sigma_mu_mu, double sigma_mu_tau, List tree_table_mu, List tree_mat_mu, List tree_table_tau, List tree_mat_tau, double lowest_BIC, int first_round, IntegerVector parent, List resids_cp_mat_mu, IntegerVector err_list, NumericMatrix x_control_test, NumericMatrix x_moderate_test, NumericVector test_z, double alpha_mu, double alpha_tau, double beta_mu, double beta_tau, bool is_test_data, double pen_mu, int num_cp_mu, double pen_tau, int num_cp_tau, bool split_rule_node, bool gridpoint, int maxOWsize, int num_splits_mu, int num_splits_tau);
RcppExport SEXP _bcfbma_get_best_trees_mu_bcf(SEXP x_control_aSEXP, SEXP x_moderate_aSEXP, SEXP zSEXP, SEXP residsSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP mu_muSEXP, SEXP mu_tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP sigma_mu_muSEXP, SEXP sigma_mu_tauSEXP, SEXP tree_table_muSEXP, SEXP tree_mat_muSEXP, SEXP tree_table_tauSEXP, SEXP tree_mat_tauSEXP, SEXP lowest_BICSEXP, SEXP first_roundSEXP, SEXP parentSEXP, SEXP resids_cp_mat_muSEXP, SEXP err_listSEXP, SEXP x_control_testSEXP, SEXP x_moderate_testSEXP, SEXP test_zSEXP, SEXP alpha_muSEXP, SEXP alpha_tauSEXP, SEXP beta_muSEXP, SEXP beta_tauSEXP, SEXP is_test_dataSEXP, SEXP pen_muSEXP, SEXP num_cp_muSEXP, SEXP pen_tauSEXP, SEXP num_cp_tauSEXP, SEXP split_rule_nodeSEXP, SEXP gridpointSEXP, SEXP maxOWsizeSEXP, SEXP num_splits_muSEXP, SEXP num_splits_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x_control_a(x_control_aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x_moderate_a(x_moderate_aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type mu_tau(mu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu_mu(sigma_mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu_tau(sigma_mu_tauSEXP);
    Rcpp::traits::input_parameter< List >::type tree_table_mu(tree_table_muSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat_mu(tree_mat_muSEXP);
    Rcpp::traits::input_parameter< List >::type tree_table_tau(tree_table_tauSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat_tau(tree_mat_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< List >::type resids_cp_mat_mu(resids_cp_mat_muSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type err_list(err_listSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_control_test(x_control_testSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_moderate_test(x_moderate_testSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_z(test_zSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_tau(alpha_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_mu(beta_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tau(beta_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type is_test_data(is_test_dataSEXP);
    Rcpp::traits::input_parameter< double >::type pen_mu(pen_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp_mu(num_cp_muSEXP);
    Rcpp::traits::input_parameter< double >::type pen_tau(pen_tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp_tau(num_cp_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type split_rule_node(split_rule_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type gridpoint(gridpointSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< int >::type num_splits_mu(num_splits_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_splits_tau(num_splits_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_trees_mu_bcf(x_control_a, x_moderate_a, z, resids, a_mu, a_tau, mu_mu, mu_tau, nu, lambda, c, sigma_mu_mu, sigma_mu_tau, tree_table_mu, tree_mat_mu, tree_table_tau, tree_mat_tau, lowest_BIC, first_round, parent, resids_cp_mat_mu, err_list, x_control_test, x_moderate_test, test_z, alpha_mu, alpha_tau, beta_mu, beta_tau, is_test_data, pen_mu, num_cp_mu, pen_tau, num_cp_tau, split_rule_node, gridpoint, maxOWsize, num_splits_mu, num_splits_tau));
    return rcpp_result_gen;
END_RCPP
}
// get_best_trees_sum_mu_bcf
List get_best_trees_sum_mu_bcf(arma::mat& x_control_a, arma::mat& x_moderate_a, NumericVector z, NumericMatrix resids, double a_mu, double a_tau, double mu_mu, double mu_tau, double nu, double lambda, int c, double sigma_mu_mu, double sigma_mu_tau, List tree_table_mu, List tree_mat_mu, List tree_table_tau, List tree_mat_tau, double lowest_BIC, int first_round, IntegerVector parent, List resids_cp_mat_mu, IntegerVector err_list, NumericMatrix x_control_test, NumericMatrix x_moderate_test, NumericVector test_z, double alpha_mu, double alpha_tau, double beta_mu, double beta_tau, bool is_test_data, double pen_mu, int num_cp_mu, double pen_tau, int num_cp_tau, bool split_rule_node, bool gridpoint, int maxOWsize, List prev_sum_trees_mu, List prev_sum_trees_tau, List prev_sum_trees_mat_mu, List prev_sum_trees_mat_tau, NumericVector y_scaled, int num_splits_mu, int num_splits_tau);
RcppExport SEXP _bcfbma_get_best_trees_sum_mu_bcf(SEXP x_control_aSEXP, SEXP x_moderate_aSEXP, SEXP zSEXP, SEXP residsSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP mu_muSEXP, SEXP mu_tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP sigma_mu_muSEXP, SEXP sigma_mu_tauSEXP, SEXP tree_table_muSEXP, SEXP tree_mat_muSEXP, SEXP tree_table_tauSEXP, SEXP tree_mat_tauSEXP, SEXP lowest_BICSEXP, SEXP first_roundSEXP, SEXP parentSEXP, SEXP resids_cp_mat_muSEXP, SEXP err_listSEXP, SEXP x_control_testSEXP, SEXP x_moderate_testSEXP, SEXP test_zSEXP, SEXP alpha_muSEXP, SEXP alpha_tauSEXP, SEXP beta_muSEXP, SEXP beta_tauSEXP, SEXP is_test_dataSEXP, SEXP pen_muSEXP, SEXP num_cp_muSEXP, SEXP pen_tauSEXP, SEXP num_cp_tauSEXP, SEXP split_rule_nodeSEXP, SEXP gridpointSEXP, SEXP maxOWsizeSEXP, SEXP prev_sum_trees_muSEXP, SEXP prev_sum_trees_tauSEXP, SEXP prev_sum_trees_mat_muSEXP, SEXP prev_sum_trees_mat_tauSEXP, SEXP y_scaledSEXP, SEXP num_splits_muSEXP, SEXP num_splits_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x_control_a(x_control_aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x_moderate_a(x_moderate_aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type mu_tau(mu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu_mu(sigma_mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu_tau(sigma_mu_tauSEXP);
    Rcpp::traits::input_parameter< List >::type tree_table_mu(tree_table_muSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat_mu(tree_mat_muSEXP);
    Rcpp::traits::input_parameter< List >::type tree_table_tau(tree_table_tauSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat_tau(tree_mat_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< List >::type resids_cp_mat_mu(resids_cp_mat_muSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type err_list(err_listSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_control_test(x_control_testSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_moderate_test(x_moderate_testSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_z(test_zSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_tau(alpha_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_mu(beta_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tau(beta_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type is_test_data(is_test_dataSEXP);
    Rcpp::traits::input_parameter< double >::type pen_mu(pen_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp_mu(num_cp_muSEXP);
    Rcpp::traits::input_parameter< double >::type pen_tau(pen_tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp_tau(num_cp_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type split_rule_node(split_rule_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type gridpoint(gridpointSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mu(prev_sum_trees_muSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_tau(prev_sum_trees_tauSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat_mu(prev_sum_trees_mat_muSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat_tau(prev_sum_trees_mat_tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_scaled(y_scaledSEXP);
    Rcpp::traits::input_parameter< int >::type num_splits_mu(num_splits_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_splits_tau(num_splits_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_trees_sum_mu_bcf(x_control_a, x_moderate_a, z, resids, a_mu, a_tau, mu_mu, mu_tau, nu, lambda, c, sigma_mu_mu, sigma_mu_tau, tree_table_mu, tree_mat_mu, tree_table_tau, tree_mat_tau, lowest_BIC, first_round, parent, resids_cp_mat_mu, err_list, x_control_test, x_moderate_test, test_z, alpha_mu, alpha_tau, beta_mu, beta_tau, is_test_data, pen_mu, num_cp_mu, pen_tau, num_cp_tau, split_rule_node, gridpoint, maxOWsize, prev_sum_trees_mu, prev_sum_trees_tau, prev_sum_trees_mat_mu, prev_sum_trees_mat_tau, y_scaled, num_splits_mu, num_splits_tau));
    return rcpp_result_gen;
END_RCPP
}
// get_best_trees_sum_tau_round1_bcf
List get_best_trees_sum_tau_round1_bcf(arma::mat& x_control_a, arma::mat& x_moderate_a, NumericVector z, NumericMatrix resids, double a_mu, double a_tau, double mu_mu, double mu_tau, double nu, double lambda, int c, double sigma_mu_mu, double sigma_mu_tau, List tree_table_mu, List tree_mat_mu, List tree_table_tau, List tree_mat_tau, double lowest_BIC, int first_round, IntegerVector parent, List resids_cp_mat_tau, IntegerVector err_list, NumericMatrix x_control_test, NumericMatrix x_moderate_test, NumericVector test_z, double alpha_mu, double alpha_tau, double beta_mu, double beta_tau, bool is_test_data, double pen_mu, int num_cp_mu, double pen_tau, int num_cp_tau, bool split_rule_node, bool gridpoint, int maxOWsize, List prev_sum_trees_mu, List prev_sum_trees_mat_mu, NumericVector y_scaled, int num_splits_mu, int num_splits_tau);
RcppExport SEXP _bcfbma_get_best_trees_sum_tau_round1_bcf(SEXP x_control_aSEXP, SEXP x_moderate_aSEXP, SEXP zSEXP, SEXP residsSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP mu_muSEXP, SEXP mu_tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP sigma_mu_muSEXP, SEXP sigma_mu_tauSEXP, SEXP tree_table_muSEXP, SEXP tree_mat_muSEXP, SEXP tree_table_tauSEXP, SEXP tree_mat_tauSEXP, SEXP lowest_BICSEXP, SEXP first_roundSEXP, SEXP parentSEXP, SEXP resids_cp_mat_tauSEXP, SEXP err_listSEXP, SEXP x_control_testSEXP, SEXP x_moderate_testSEXP, SEXP test_zSEXP, SEXP alpha_muSEXP, SEXP alpha_tauSEXP, SEXP beta_muSEXP, SEXP beta_tauSEXP, SEXP is_test_dataSEXP, SEXP pen_muSEXP, SEXP num_cp_muSEXP, SEXP pen_tauSEXP, SEXP num_cp_tauSEXP, SEXP split_rule_nodeSEXP, SEXP gridpointSEXP, SEXP maxOWsizeSEXP, SEXP prev_sum_trees_muSEXP, SEXP prev_sum_trees_mat_muSEXP, SEXP y_scaledSEXP, SEXP num_splits_muSEXP, SEXP num_splits_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x_control_a(x_control_aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x_moderate_a(x_moderate_aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type mu_tau(mu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu_mu(sigma_mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu_tau(sigma_mu_tauSEXP);
    Rcpp::traits::input_parameter< List >::type tree_table_mu(tree_table_muSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat_mu(tree_mat_muSEXP);
    Rcpp::traits::input_parameter< List >::type tree_table_tau(tree_table_tauSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat_tau(tree_mat_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< List >::type resids_cp_mat_tau(resids_cp_mat_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type err_list(err_listSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_control_test(x_control_testSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_moderate_test(x_moderate_testSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_z(test_zSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_tau(alpha_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_mu(beta_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tau(beta_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type is_test_data(is_test_dataSEXP);
    Rcpp::traits::input_parameter< double >::type pen_mu(pen_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp_mu(num_cp_muSEXP);
    Rcpp::traits::input_parameter< double >::type pen_tau(pen_tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp_tau(num_cp_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type split_rule_node(split_rule_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type gridpoint(gridpointSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mu(prev_sum_trees_muSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat_mu(prev_sum_trees_mat_muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_scaled(y_scaledSEXP);
    Rcpp::traits::input_parameter< int >::type num_splits_mu(num_splits_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_splits_tau(num_splits_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_trees_sum_tau_round1_bcf(x_control_a, x_moderate_a, z, resids, a_mu, a_tau, mu_mu, mu_tau, nu, lambda, c, sigma_mu_mu, sigma_mu_tau, tree_table_mu, tree_mat_mu, tree_table_tau, tree_mat_tau, lowest_BIC, first_round, parent, resids_cp_mat_tau, err_list, x_control_test, x_moderate_test, test_z, alpha_mu, alpha_tau, beta_mu, beta_tau, is_test_data, pen_mu, num_cp_mu, pen_tau, num_cp_tau, split_rule_node, gridpoint, maxOWsize, prev_sum_trees_mu, prev_sum_trees_mat_mu, y_scaled, num_splits_mu, num_splits_tau));
    return rcpp_result_gen;
END_RCPP
}
// get_best_trees_sum_tau_bcf
List get_best_trees_sum_tau_bcf(arma::mat& x_control_a, arma::mat& x_moderate_a, NumericVector z, NumericMatrix resids, double a_mu, double a_tau, double mu_mu, double mu_tau, double nu, double lambda, int c, double sigma_mu_mu, double sigma_mu_tau, List tree_table_mu, List tree_mat_mu, List tree_table_tau, List tree_mat_tau, double lowest_BIC, int first_round, IntegerVector parent, List resids_cp_mat_tau, IntegerVector err_list, NumericMatrix x_control_test, NumericMatrix x_moderate_test, NumericVector test_z, double alpha_mu, double alpha_tau, double beta_mu, double beta_tau, bool is_test_data, double pen_mu, int num_cp_mu, double pen_tau, int num_cp_tau, bool split_rule_node, bool gridpoint, int maxOWsize, List prev_sum_trees_mu, List prev_sum_trees_tau, List prev_sum_trees_mat_mu, List prev_sum_trees_mat_tau, NumericVector y_scaled, int num_splits_mu, int num_splits_tau);
RcppExport SEXP _bcfbma_get_best_trees_sum_tau_bcf(SEXP x_control_aSEXP, SEXP x_moderate_aSEXP, SEXP zSEXP, SEXP residsSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP mu_muSEXP, SEXP mu_tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP sigma_mu_muSEXP, SEXP sigma_mu_tauSEXP, SEXP tree_table_muSEXP, SEXP tree_mat_muSEXP, SEXP tree_table_tauSEXP, SEXP tree_mat_tauSEXP, SEXP lowest_BICSEXP, SEXP first_roundSEXP, SEXP parentSEXP, SEXP resids_cp_mat_tauSEXP, SEXP err_listSEXP, SEXP x_control_testSEXP, SEXP x_moderate_testSEXP, SEXP test_zSEXP, SEXP alpha_muSEXP, SEXP alpha_tauSEXP, SEXP beta_muSEXP, SEXP beta_tauSEXP, SEXP is_test_dataSEXP, SEXP pen_muSEXP, SEXP num_cp_muSEXP, SEXP pen_tauSEXP, SEXP num_cp_tauSEXP, SEXP split_rule_nodeSEXP, SEXP gridpointSEXP, SEXP maxOWsizeSEXP, SEXP prev_sum_trees_muSEXP, SEXP prev_sum_trees_tauSEXP, SEXP prev_sum_trees_mat_muSEXP, SEXP prev_sum_trees_mat_tauSEXP, SEXP y_scaledSEXP, SEXP num_splits_muSEXP, SEXP num_splits_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x_control_a(x_control_aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type x_moderate_a(x_moderate_aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type mu_tau(mu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu_mu(sigma_mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu_tau(sigma_mu_tauSEXP);
    Rcpp::traits::input_parameter< List >::type tree_table_mu(tree_table_muSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat_mu(tree_mat_muSEXP);
    Rcpp::traits::input_parameter< List >::type tree_table_tau(tree_table_tauSEXP);
    Rcpp::traits::input_parameter< List >::type tree_mat_tau(tree_mat_tauSEXP);
    Rcpp::traits::input_parameter< double >::type lowest_BIC(lowest_BICSEXP);
    Rcpp::traits::input_parameter< int >::type first_round(first_roundSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< List >::type resids_cp_mat_tau(resids_cp_mat_tauSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type err_list(err_listSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_control_test(x_control_testSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_moderate_test(x_moderate_testSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_z(test_zSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_tau(alpha_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_mu(beta_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tau(beta_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type is_test_data(is_test_dataSEXP);
    Rcpp::traits::input_parameter< double >::type pen_mu(pen_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp_mu(num_cp_muSEXP);
    Rcpp::traits::input_parameter< double >::type pen_tau(pen_tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp_tau(num_cp_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type split_rule_node(split_rule_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type gridpoint(gridpointSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mu(prev_sum_trees_muSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_tau(prev_sum_trees_tauSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat_mu(prev_sum_trees_mat_muSEXP);
    Rcpp::traits::input_parameter< List >::type prev_sum_trees_mat_tau(prev_sum_trees_mat_tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_scaled(y_scaledSEXP);
    Rcpp::traits::input_parameter< int >::type num_splits_mu(num_splits_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_splits_tau(num_splits_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(get_best_trees_sum_tau_bcf(x_control_a, x_moderate_a, z, resids, a_mu, a_tau, mu_mu, mu_tau, nu, lambda, c, sigma_mu_mu, sigma_mu_tau, tree_table_mu, tree_mat_mu, tree_table_tau, tree_mat_tau, lowest_BIC, first_round, parent, resids_cp_mat_tau, err_list, x_control_test, x_moderate_test, test_z, alpha_mu, alpha_tau, beta_mu, beta_tau, is_test_data, pen_mu, num_cp_mu, pen_tau, num_cp_tau, split_rule_node, gridpoint, maxOWsize, prev_sum_trees_mu, prev_sum_trees_tau, prev_sum_trees_mat_mu, prev_sum_trees_mat_tau, y_scaled, num_splits_mu, num_splits_tau));
    return rcpp_result_gen;
END_RCPP
}
// scale_response_bcf
NumericVector scale_response_bcf(double a, double b, double c, double d, NumericVector y);
RcppExport SEXP _bcfbma_scale_response_bcf(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(scale_response_bcf(a, b, c, d, y));
    return rcpp_result_gen;
END_RCPP
}
// get_original_bcf
NumericVector get_original_bcf(double low, double high, double sp_low, double sp_high, NumericVector sum_preds);
RcppExport SEXP _bcfbma_get_original_bcf(SEXP lowSEXP, SEXP highSEXP, SEXP sp_lowSEXP, SEXP sp_highSEXP, SEXP sum_predsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type sp_low(sp_lowSEXP);
    Rcpp::traits::input_parameter< double >::type sp_high(sp_highSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sum_preds(sum_predsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_original_bcf(low, high, sp_low, sp_high, sum_preds));
    return rcpp_result_gen;
END_RCPP
}
// BCF_BMA_sumLikelihood
List BCF_BMA_sumLikelihood(NumericMatrix data, NumericVector y, NumericVector z, NumericMatrix pihat, double a_mu, double a_tau, double mu_mu, double mu_tau, double nu, double lambda, int c, double sigma_mu_mu, double sigma_mu_tau, double pen_mu, double pen_tau, int num_cp_mu, int num_cp_tau, NumericMatrix test_data, NumericVector test_z, NumericMatrix test_pihat, int ntree_control, int ntree_moderate, double alpha_mu, double alpha_tau, double beta_mu, double beta_tau, bool split_rule_node, bool gridpoint, int maxOWsize, int num_splits_mu, int num_splits_tau);
RcppExport SEXP _bcfbma_BCF_BMA_sumLikelihood(SEXP dataSEXP, SEXP ySEXP, SEXP zSEXP, SEXP pihatSEXP, SEXP a_muSEXP, SEXP a_tauSEXP, SEXP mu_muSEXP, SEXP mu_tauSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP cSEXP, SEXP sigma_mu_muSEXP, SEXP sigma_mu_tauSEXP, SEXP pen_muSEXP, SEXP pen_tauSEXP, SEXP num_cp_muSEXP, SEXP num_cp_tauSEXP, SEXP test_dataSEXP, SEXP test_zSEXP, SEXP test_pihatSEXP, SEXP ntree_controlSEXP, SEXP ntree_moderateSEXP, SEXP alpha_muSEXP, SEXP alpha_tauSEXP, SEXP beta_muSEXP, SEXP beta_tauSEXP, SEXP split_rule_nodeSEXP, SEXP gridpointSEXP, SEXP maxOWsizeSEXP, SEXP num_splits_muSEXP, SEXP num_splits_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pihat(pihatSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type mu_tau(mu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu_mu(sigma_mu_muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_mu_tau(sigma_mu_tauSEXP);
    Rcpp::traits::input_parameter< double >::type pen_mu(pen_muSEXP);
    Rcpp::traits::input_parameter< double >::type pen_tau(pen_tauSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp_mu(num_cp_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_cp_tau(num_cp_tauSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_data(test_dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_z(test_zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_pihat(test_pihatSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_control(ntree_controlSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_moderate(ntree_moderateSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_mu(alpha_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_tau(alpha_tauSEXP);
    Rcpp::traits::input_parameter< double >::type beta_mu(beta_muSEXP);
    Rcpp::traits::input_parameter< double >::type beta_tau(beta_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type split_rule_node(split_rule_nodeSEXP);
    Rcpp::traits::input_parameter< bool >::type gridpoint(gridpointSEXP);
    Rcpp::traits::input_parameter< int >::type maxOWsize(maxOWsizeSEXP);
    Rcpp::traits::input_parameter< int >::type num_splits_mu(num_splits_muSEXP);
    Rcpp::traits::input_parameter< int >::type num_splits_tau(num_splits_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(BCF_BMA_sumLikelihood(data, y, z, pihat, a_mu, a_tau, mu_mu, mu_tau, nu, lambda, c, sigma_mu_mu, sigma_mu_tau, pen_mu, pen_tau, num_cp_mu, num_cp_tau, test_data, test_z, test_pihat, ntree_control, ntree_moderate, alpha_mu, alpha_tau, beta_mu, beta_tau, split_rule_node, gridpoint, maxOWsize, num_splits_mu, num_splits_tau));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bcfbma_add_rows_bcf", (DL_FUNC) &_bcfbma_add_rows_bcf, 2},
    {"_bcfbma_addcol_bcf", (DL_FUNC) &_bcfbma_addcol_bcf, 4},
    {"_bcfbma_set_daughter_to_end_tree_bcf", (DL_FUNC) &_bcfbma_set_daughter_to_end_tree_bcf, 3},
    {"_bcfbma_set_daughter_to_end_mat_bcf", (DL_FUNC) &_bcfbma_set_daughter_to_end_mat_bcf, 5},
    {"_bcfbma_remove_zero_bcf", (DL_FUNC) &_bcfbma_remove_zero_bcf, 1},
    {"_bcfbma_order_intvec_bcf", (DL_FUNC) &_bcfbma_order_intvec_bcf, 1},
    {"_bcfbma_get_gnp_bcf", (DL_FUNC) &_bcfbma_get_gnp_bcf, 2},
    {"_bcfbma_find_term_nodes_bcf", (DL_FUNC) &_bcfbma_find_term_nodes_bcf, 1},
    {"_bcfbma_find_term_obs_bcf", (DL_FUNC) &_bcfbma_find_term_obs_bcf, 2},
    {"_bcfbma_likelihood_function_mu_bcf", (DL_FUNC) &_bcfbma_likelihood_function_mu_bcf, 7},
    {"_bcfbma_likelihood_function_bcf", (DL_FUNC) &_bcfbma_likelihood_function_bcf, 7},
    {"_bcfbma_find_internal_nodes_bcf", (DL_FUNC) &_bcfbma_find_internal_nodes_bcf, 1},
    {"_bcfbma_find_prev_nonterm_bcf", (DL_FUNC) &_bcfbma_find_prev_nonterm_bcf, 2},
    {"_bcfbma_find_nodes_to_update_bcf", (DL_FUNC) &_bcfbma_find_nodes_to_update_bcf, 2},
    {"_bcfbma_set_tree_to_middle_bcf", (DL_FUNC) &_bcfbma_set_tree_to_middle_bcf, 4},
    {"_bcfbma_update_grow_obs_bcf", (DL_FUNC) &_bcfbma_update_grow_obs_bcf, 6},
    {"_bcfbma_find_obs_to_update_grow_bcf", (DL_FUNC) &_bcfbma_find_obs_to_update_grow_bcf, 5},
    {"_bcfbma_get_subset_bcf", (DL_FUNC) &_bcfbma_get_subset_bcf, 2},
    {"_bcfbma_get_daughter_obs_bcf", (DL_FUNC) &_bcfbma_get_daughter_obs_bcf, 4},
    {"_bcfbma_find_term_cols_bcf", (DL_FUNC) &_bcfbma_find_term_cols_bcf, 2},
    {"_bcfbma_get_grow_obs_bcf", (DL_FUNC) &_bcfbma_get_grow_obs_bcf, 3},
    {"_bcfbma_get_grow_obs_in_z_bcf", (DL_FUNC) &_bcfbma_get_grow_obs_in_z_bcf, 2},
    {"_bcfbma_grow_tree_bcf", (DL_FUNC) &_bcfbma_grow_tree_bcf, 12},
    {"_bcfbma_set_daughter_bcf", (DL_FUNC) &_bcfbma_set_daughter_bcf, 6},
    {"_bcfbma_order__bcf", (DL_FUNC) &_bcfbma_order__bcf, 1},
    {"_bcfbma_orderforOW__bcf", (DL_FUNC) &_bcfbma_orderforOW__bcf, 1},
    {"_bcfbma_get_tree_prior_bcf", (DL_FUNC) &_bcfbma_get_tree_prior_bcf, 4},
    {"_bcfbma_start_tree_bcf", (DL_FUNC) &_bcfbma_start_tree_bcf, 2},
    {"_bcfbma_start_matrix_bcf", (DL_FUNC) &_bcfbma_start_matrix_bcf, 1},
    {"_bcfbma_evaluate_model_occams_window_bcf", (DL_FUNC) &_bcfbma_evaluate_model_occams_window_bcf, 6},
    {"_bcfbma_get_testdata_term_obs_bcf", (DL_FUNC) &_bcfbma_get_testdata_term_obs_bcf, 3},
    {"_bcfbma_resize_bcf", (DL_FUNC) &_bcfbma_resize_bcf, 2},
    {"_bcfbma_resize_bigger_bcf", (DL_FUNC) &_bcfbma_resize_bigger_bcf, 2},
    {"_bcfbma_J_bcf", (DL_FUNC) &_bcfbma_J_bcf, 3},
    {"_bcfbma_mu_vector_bcf", (DL_FUNC) &_bcfbma_mu_vector_bcf, 2},
    {"_bcfbma_W_bcf", (DL_FUNC) &_bcfbma_W_bcf, 3},
    {"_bcfbma_sumtree_likelihood_function_bcf_bcf", (DL_FUNC) &_bcfbma_sumtree_likelihood_function_bcf_bcf, 11},
    {"_bcfbma_get_best_split_mu_bcf", (DL_FUNC) &_bcfbma_get_best_split_mu_bcf, 16},
    {"_bcfbma_get_best_split_bcf", (DL_FUNC) &_bcfbma_get_best_split_bcf, 16},
    {"_bcfbma_get_best_split_tau_round1_bcf", (DL_FUNC) &_bcfbma_get_best_split_tau_round1_bcf, 26},
    {"_bcfbma_get_best_split_sum_tau_bcf", (DL_FUNC) &_bcfbma_get_best_split_sum_tau_bcf, 28},
    {"_bcfbma_get_best_split_sum_mu_bcf", (DL_FUNC) &_bcfbma_get_best_split_sum_mu_bcf, 28},
    {"_bcfbma_update_mean_var_bcf", (DL_FUNC) &_bcfbma_update_mean_var_bcf, 4},
    {"_bcfbma_update_predictions_bcf", (DL_FUNC) &_bcfbma_update_predictions_bcf, 4},
    {"_bcfbma_subsetter_bcf", (DL_FUNC) &_bcfbma_subsetter_bcf, 2},
    {"_bcfbma_order_inc__bcf", (DL_FUNC) &_bcfbma_order_inc__bcf, 1},
    {"_bcfbma_min_which2_bcf", (DL_FUNC) &_bcfbma_min_which2_bcf, 4},
    {"_bcfbma_mll_meanvar2_bcf", (DL_FUNC) &_bcfbma_mll_meanvar2_bcf, 3},
    {"_bcfbma_PELT_meanvar_norm2_bcf", (DL_FUNC) &_bcfbma_PELT_meanvar_norm2_bcf, 2},
    {"_bcfbma_SS_bcf", (DL_FUNC) &_bcfbma_SS_bcf, 3},
    {"_bcfbma_gridCP_bcf", (DL_FUNC) &_bcfbma_gridCP_bcf, 3},
    {"_bcfbma_make_gridpoint_cpmat_mu_bcf", (DL_FUNC) &_bcfbma_make_gridpoint_cpmat_mu_bcf, 4},
    {"_bcfbma_make_gridpoint_cpmat_tau_bcf", (DL_FUNC) &_bcfbma_make_gridpoint_cpmat_tau_bcf, 5},
    {"_bcfbma_make_pelt_cpmat_mu_bcf", (DL_FUNC) &_bcfbma_make_pelt_cpmat_mu_bcf, 4},
    {"_bcfbma_make_pelt_cpmat_tau_bcf", (DL_FUNC) &_bcfbma_make_pelt_cpmat_tau_bcf, 5},
    {"_bcfbma_get_best_trees_mu_bcf", (DL_FUNC) &_bcfbma_get_best_trees_mu_bcf, 39},
    {"_bcfbma_get_best_trees_sum_mu_bcf", (DL_FUNC) &_bcfbma_get_best_trees_sum_mu_bcf, 44},
    {"_bcfbma_get_best_trees_sum_tau_round1_bcf", (DL_FUNC) &_bcfbma_get_best_trees_sum_tau_round1_bcf, 42},
    {"_bcfbma_get_best_trees_sum_tau_bcf", (DL_FUNC) &_bcfbma_get_best_trees_sum_tau_bcf, 44},
    {"_bcfbma_scale_response_bcf", (DL_FUNC) &_bcfbma_scale_response_bcf, 5},
    {"_bcfbma_get_original_bcf", (DL_FUNC) &_bcfbma_get_original_bcf, 5},
    {"_bcfbma_BCF_BMA_sumLikelihood", (DL_FUNC) &_bcfbma_BCF_BMA_sumLikelihood, 31},
    {NULL, NULL, 0}
};

RcppExport void R_init_bcfbma(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
